/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   intersection.h                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hsarhan <hsarhan@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/11/21 12:19:12 by mkhan             #+#    #+#             */
/*   Updated: 2022/12/23 12:03:13 by hsarhan          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef INTERSECTION_H
# define INTERSECTION_H

# include "scene.h"

/**
 * @brief A ray being cast from the screen
 * @param origin The ray starting point
 * @param direction The direction where the ray is being projected
 */
typedef struct s_ray			t_ray;
struct s_ray
{
	t_vector	origin;
	t_vector	direction;
};
void		ray_for_pixel(t_ray *ray, const t_camera *cam, int x, int y);

/**
 * @brief Struct containing information relevant for mlx and the window
 * generated by it
 * @param mlx Pointer to mlx instance
 * @param mlx_win Pointer to mlx window
 * @param img Pointer to image that we will write the pixels to
 * @param addr Pointer to the first pixel of the image
 * @param bytes_per_pixel Bytes per pixel
 * @param line_length Number of pixels in a row
 * @param endian idk
 */
typedef struct s_mlx			t_mlx;
struct	s_mlx
{
	void	*mlx;
	void	*mlx_win;
	void	*edit_img;
	char	*edit_addr;
	void	*display_img;
	char	*display_addr;
	void	*render_img;
	char	*render_addr;
	void	*info_img;
	char	*info_addr;
	int		bytes_per_pixel;
	int		line_length;
	int		endian;
};

/**
 * @brief Contains the time value of an intersection of a ray with an object,
 * along with the object that it intersected with
 * @param time The t value of the intersection
 * @param shape A pointer to the object that the ray intersected with
 */
typedef struct s_intersect		t_intersect;
struct s_intersect
{	
	float		time;
	t_shape		*shape;
	t_vector	point;
	t_vector	normal;
	t_vector	eye;
	t_vector	over_point;
	t_vector	under_point;
	t_vector	reflect_vec;
	float		n1;
	float		n2;
	bool		inside;
};

/**
 * @brief A wrapper around an array of intersections
 * @param arr Array of intersections
 * @param count Number of intersections in the array
 */
typedef struct s_intersections	t_intersections;
struct s_intersections
{
	t_intersect	arr[100];
	int			count;
};
// draw_scene.c
void		draw_scene(t_scene *scene);

// intersections.c
void		ray_position(t_vector *pos, const t_ray *ray, float time);
void		transform_ray(t_ray *transformed_ray, const t_ray *ray,
				const t_shape *shape);
bool		intersect(t_shape *shape, const t_ray *ray, t_intersections *xs);
t_intersect	*hit(t_intersections *xs);
t_vector	normal_at(const t_shape *shape, const t_vector *intersection_point);
t_color		lighting(t_intersect *intersection, t_scene *scene, int light_idx);
bool		is_shadowed(t_scene *scene, int light_idx,
				t_vector *intersection_point);
t_color		reflected_color(t_scene *scene, t_intersect *intersection, int remaining, int light_idx);
void		prepare_computations(t_scene *scene, t_intersect *intersection, t_ray *ray, t_intersections *xs);
void		*render_scene_fast(t_worker *worker);
void		sort_intersections(t_intersections *arr);
t_color		refracted_color(t_scene *scene, t_intersect *intersection, int	remaining, int light_idx);
float		schlick(t_intersect *intersection);
t_intersect	*hit_skip_transparent(t_intersections *xs);
bool		intersect_cube(t_shape *shape, t_ray *ray, t_intersections *xs);
float		find_max(float n1, float n2, float n3);
void		check_axis(float *t_min, float *t_max, float origin, float direction);
t_intersect	*hit_sorted(t_intersections *xs);

#endif
