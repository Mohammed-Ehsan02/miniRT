// dir structure:
// 	src:
// 		parsing/
// 		math/
// 		intersections/
// 		shading/
// 		renderer/
// 		edit_mode/
// 		ui/
// 		utils/
// 		main.c

// utils/math_utils.c
int		min(int a, int b)
float	max3(float n1, float n2, float n3)
float	min3(float n1, float n2, float n3)

// utils/free_utils.c
void	free_split_array(char **arr)
void	free_scene(t_scene *scene)

// utils/intersections.c
void			prepare_computations(t_intersection *intersection,
					t_ray *ray)
t_intersection	*hit(t_intersections *xs)

// utils/color.c
int				get_r(int col)
int				get_g(int col)
int				get_b(int col)
int				color_mix(int c1, int c2, float mix)
int				color_difference(int c1, int c2)
unsigned int	clamp_color(float color)
unsigned int	create_mlx_color(t_color *color)

// ui/shape_marker.c
void	draw_marker(t_scene *scene, int x, int y, int color)
void	perspective_projection(t_vector *point, const t_scene *scene)
void	project_marker_on_screen(t_scene *scene, t_shape *shape)
void	draw_shape_marker(t_scene *scene)

// ui/arrow.c
void	left_right_arrows(t_scene *scene, int x, int y)
void	up_down_arrows(t_scene *scene, int x, int y)
void	bottom_corner_arrows(t_scene *scene, int x, int y)
void	top_corner_arrows(t_scene *scene, int x, int y)
void	draw_arrow(t_scene *scene, int x, int y)

// ui/loading_bar.c
void	update_loading_bar(t_worker *worker, int *line_counter)
void	display_loading_bar(t_scene *scene)

// ui/shape_info.c
void	draw_shape_info(t_scene *scene)

// renderer/skip_pixels.c
void	fill_in_skipped_pixels_h(int x, int y, t_worker *worker, int threshold)
void	fill_in_skipped_pixels_v(int x, int y, t_worker *worker, int threshold)
void	fill_in_horizontal(t_worker *worker, int threshold)
void	fill_in_vertical(t_worker *worker, int threshold)

// renderer/workers.c
void	init_workers(t_worker *workers, t_scene *scene)
void	run_threads(t_worker *workers, t_scene *scene, bool loading, void *func)

// renderer/render.c
void	render_pixel(int x, int y, t_intersections *arr, t_worker *worker)
void	*render_scene_fast(t_worker *worker)
void	draw_scene(t_scene *scene)
void	*nearest_neighbours_scaling(t_worker *worker)

// renderer/camera.c
void	calculate_camera_transform(t_scene *scene)
void	view_transform(t_mat4 *res, const t_vector *from, const t_vector *up,
			const t_vector *forward)
void	camera_init(t_camera *camera, t_scene *scene)
void	ray_for_pixel(t_ray *ray, const t_camera *cam, int x, int y)

// renderer/ray_casting.c
void	calculate_orientation(t_mat4 *rot_transform, t_shape *shape)
void	multiply_transforms(t_shape *shape, t_mat4 *scale, t_mat4 *rot,
			t_mat4 *translate)
void	calculate_transforms(t_scene *scene)
void	ray_position(t_vector *pos, const t_ray *ray, float time)
void	transform_ray(t_ray *transformed_ray, const t_ray *ray,
			const t_shape *shape)

// shading/color_operations.c
void	add_colors(t_color *res, const t_color *c1, const t_color *c2)
void	mult_color(t_color *res, const t_color *color, float val)
void	blend_colors(t_color *res, const t_color *c1, const t_color *c2)
int		get_color(t_worker *worker, int x, int y)
void	set_color(t_worker *worker, int x, int y, int color)

// shading/reflections.c
void	reflect(t_vector *res, t_vector *in_vector, t_vector *normal)
t_color	calculate_reflected_color(t_intersections *arr, t_scene *scene,
		t_ray *ray, int remaining, int light_idx)
t_color	reflected_color(t_scene *scene, t_intersection *intersection,
		int remaining, int light_idx)

// shading/phong.c
t_color	get_ambient(t_color *effective_color,
			t_light *light, t_scene *scene)
bool	get_specular_and_diffuse(t_scene *scene, int light_idx,
			t_intersection *itx, t_color *diffuse, t_color *effective_color,
			t_color *specular)
t_color	phong(t_intersection *itx, t_scene *scene, int light_idx)
t_color	shade_point(t_intersections *arr, t_scene *scene, t_ray *ray)
bool			is_shadowed(t_scene *scene, int light_idx, t_vector *itx_point)

// intersections/shape_intersections.c
bool	intersect_sphere_fast(const t_ray *ray, t_intersections *xs,
			t_shape *sphere)
bool	intersect_sphere(t_ray *transf_ray, t_intersections *xs,
			t_shape *sphere)
bool	within_cylinder_radius(const t_ray *ray, float t)
bool	check_cylinder_caps(const t_ray *ray, t_shape *shape,
			t_intersections *xs)
bool	within_cone_radius(const t_ray *ray, float t, float cone_val)
bool	check_cone_caps(const t_ray *ray, t_shape *shape, t_intersections *xs)
bool	intersect_cube(t_shape *shape, t_ray *ray, t_intersections *xs)
void	check_axis(float *t_min, float *t_max, float origin, float direction)
bool	intersect_plane_fast(const t_ray *ray, t_shape *shape,
			t_intersections *xs)
bool	intersect_cylinder(const t_ray *ray, t_shape *shape,
			t_intersections *xs)
bool	intersect_cone(const t_ray *ray, t_shape *shape, t_intersections *xs)
bool	intersect(t_shape *shape, const t_ray *ray, t_intersections *xs)

// intersections/normal.c
t_vector	cylinder_normal(const t_shape *shape, t_vector *point)
t_vector	cone_normal(const t_shape *shape, t_vector *point)
t_vector	normal_at(const t_shape *shape, const t_vector *itx_point)

// main.c
int		open_file(int argc, char **argv)
void	init_display(t_display *disp, t_settings *settings)
void	init_settings(t_settings *settings)
void	setup_hooks(t_scene *scene)
int	main(int argc, char **argv)


